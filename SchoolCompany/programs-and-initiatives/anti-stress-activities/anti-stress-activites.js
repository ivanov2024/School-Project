// –ï–ª–µ–º–µ–Ω—Ç–∏—Ç–µ
const calendar = document.getElementById("calendar");
const emojiModal = document.getElementById("emojiModal");
const emojiButtons = document.querySelectorAll(".emoji-options button");
const emojiClose = document.querySelector(".emoji-close");
const datePicker = document.getElementById("date-picker");

const textModal = document.getElementById("textModal");
const textClose = document.querySelector(".text-close");
const saveNoteBtn = document.getElementById("save-note");
const noteTextarea = document.getElementById("day-note");

let currentDate = new Date();
let selectedDayElement = null;

// Emoji —Å—Ç–∏–ª–æ–≤–µ
const emojiMoods = {
  "üòä": "mood-happy",
  "üò¢": "mood-sad",
  "üò°": "mood-angry",
  "üòê": "mood-neutral"
};

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ JSON –ø–∞—Ä—Å–≤–∞–Ω–µ
function safeParse(key) {
  try {
    const data = localStorage.getItem(key);
    return data ? JSON.parse(data) : {};
  } catch (e) {
    console.warn(`‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º —Å localStorage[${key}]:`, e.message);
    localStorage.removeItem(key);
    return {};
  }
}

// –†–µ–Ω–¥–∏—Ä–∞–Ω–µ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ ‚Äì —Å–∞–º–æ —Ç–µ–∫—É—â–∏—è –º–µ—Å–µ—Ü
function renderCalendar(date) {
  calendar.innerHTML = "";

  const year = date.getFullYear();
  const month = date.getMonth();
  const daysInMonth = new Date(year, month + 1, 0).getDate();

  const emojiData = safeParse("emojiCalendar");
  const notes = safeParse("dayNotes");
  const monthKey = `${year}-${month + 1}`;

  for (let i = 1; i <= daysInMonth; i++) {
    const day = document.createElement("div");
    day.className = "calendar-day";
    day.textContent = i;
  
    const dayId = `${monthKey}-day-${i}`;
    day.setAttribute("data-date", dayId);
  
    // –ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –æ—Å—Ç–∞—Ç—ä—Ü–∏
    day.innerHTML = i;
  
    // üéØ –ï–º–æ–¥–∂–∏
    if (emojiData[dayId]) {
      const { emoji, color } = emojiData[dayId];
      day.style.backgroundColor = color;
  
      const emojiSpan = document.createElement("span");
      emojiSpan.className = "emoji-indicator";
      emojiSpan.innerText = emoji;
      day.appendChild(emojiSpan);
    }
  
    // üìù –ë–µ–ª–µ–∂–∫–∞
    if (notes[dayId]) {
      day.classList.add("has-note");
  
      const noteIcon = document.createElement("span");
      noteIcon.className = "note-indicator";
      noteIcon.textContent = "üìù";
      day.appendChild(noteIcon);
  
      const noteText = document.createElement("div");
      noteText.className = "note-preview";
      noteText.textContent = notes[dayId];
      day.appendChild(noteText);
    }
  
    // üëâ –ö–ª–∏–∫ –∑–∞ –æ—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—è –º–æ–¥–∞–ª
    day.addEventListener("click", () => {
        console.log("–ö–ª–∏–∫–Ω–∞—Ç –¥–µ–Ω:", dayId);
      selectedDayElement = day;
      noteTextarea.value = notes[dayId] || "";
      openTextModal();
    });
  
    calendar.appendChild(day);
  }
  
}

// üëâ –û—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—è –º–æ–¥–∞–ª
function openTextModal() {
  textModal.style.display = "block";
}

// üëâ –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—è –º–æ–¥–∞–ª
function closeTextModal() {
  textModal.style.display = "none";
}

// üëâ –û—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ emoji –º–æ–¥–∞–ª–∞
function openEmojiModal() {
  emojiModal.style.display = "block";
}

// üëâ –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ emoji –º–æ–¥–∞–ª–∞
function closeEmojiModal() {
  emojiModal.style.display = "none";
}

// –ò–∑–±–æ—Ä –Ω–∞ –¥–∞—Ç–∞ –æ—Ç input
datePicker.addEventListener("change", () => {
  const selectedDate = new Date(datePicker.value);
  if (isNaN(selectedDate)) return;

  const year = selectedDate.getFullYear();
  const month = selectedDate.getMonth();
  const day = selectedDate.getDate();

  currentDate = new Date(year, month, 1);
  renderCalendar(currentDate);

  setTimeout(() => {
    const dayId = `${year}-${month + 1}-day-${day}`;
    const calendarDay = document.querySelector(`[data-date="${dayId}"]`);

    if (calendarDay) {
      calendarDay.classList.remove("inactive-day");
      selectedDayElement = calendarDay;

      calendarDay.scrollIntoView({ behavior: "smooth", block: "center" });
      calendarDay.classList.add("selected-date-glow");

      setTimeout(() => {
        calendarDay.classList.remove("selected-date-glow");
      }, 2000);

      calendarDay.click(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç–≤–∞—Ä—è –±–µ–ª–µ–∂–∫–∞—Ç–∞
    }
  }, 100);
});

// –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –±–µ–ª–µ–∂–∫–∞ –∏ –ø—Ä–µ–º–∏–Ω–∞–≤–∞–Ω–µ –∫—ä–º emoji
saveNoteBtn.addEventListener("click", () => {
  if (!selectedDayElement) return;

  const dayId = selectedDayElement.getAttribute("data-date");
  const note = noteTextarea.value.trim();
  const notes = safeParse("dayNotes");

  // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –∏–ª–∏ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –±–µ–ª–µ–∂–∫–∞—Ç–∞
  if (note) {
    notes[dayId] = note;
    selectedDayElement.classList.add("has-note");

    const noteIcon = document.createElement("span");
    noteIcon.className = "note-indicator";
    noteIcon.textContent = "üìù";
    selectedDayElement.appendChild(noteIcon);

    const noteText = document.createElement("div");
    noteText.className = "note-preview";
    noteText.textContent = note;
    selectedDayElement.appendChild(noteText);
  } else {
    delete notes[dayId];
    selectedDayElement.classList.remove("has-note");
  }

  localStorage.setItem("dayNotes", JSON.stringify(notes));

  closeTextModal();
  openEmojiModal();
});

// Emoji –ª–æ–≥–∏–∫–∞
emojiButtons.forEach(button => {
  button.addEventListener("click", () => {
    if (!selectedDayElement) return;

    const emoji = button.getAttribute("data-emoji");
    const bgColor = button.getAttribute("data-color");
    const dayId = selectedDayElement.getAttribute("data-date");

    // üßπ –ê–∫–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –∏–∑–±—Ä–∞–ª "–ò–∑—á–∏—Å—Ç–∏"
    if (emoji === "") {
      // 1. –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –æ—Ç localStorage
      const notes = safeParse("dayNotes");
      const emojiData = safeParse("emojiCalendar");

      delete notes[dayId];
      delete emojiData[dayId];

      localStorage.setItem("dayNotes", JSON.stringify(notes));
      localStorage.setItem("emojiCalendar", JSON.stringify(emojiData));

      // 2. –ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –≤–∏–∑—É–∞–ª–Ω–∏—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
      selectedDayElement.classList.remove("has-note");
      selectedDayElement.style.backgroundColor = "";

      const noteIcon = selectedDayElement.querySelector(".note-indicator");
      if (noteIcon) noteIcon.remove();

      const notePreview = selectedDayElement.querySelector(".note-preview");
      if (notePreview) notePreview.remove();

      const emojiIndicator = selectedDayElement.querySelector(".emoji-indicator");
      if (emojiIndicator) emojiIndicator.remove();

      noteTextarea.value = "";

      closeEmojiModal();
      return; // üõë –°–ø–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Å—Ç–∞–Ω–∞–ª–∏—è –∫–æ–¥
    }

    // üéØ –ê–∫–æ –µ –∏–∑–±—Ä–∞–Ω–æ –Ω–æ—Ä–º–∞–ª–Ω–æ –µ–º–æ–¥–∂–∏:
    selectedDayElement.style.backgroundColor = bgColor || "";

    let existingEmoji = selectedDayElement.querySelector(".emoji-indicator");
    if (existingEmoji) existingEmoji.remove();

    const emojiSpan = document.createElement("span");
    emojiSpan.className = "emoji-indicator";
    emojiSpan.innerText = emoji;
    selectedDayElement.appendChild(emojiSpan);

    const emojiData = safeParse("emojiCalendar");
    emojiData[dayId] = { emoji, color: bgColor };
    localStorage.setItem("emojiCalendar", JSON.stringify(emojiData));

    closeEmojiModal();
  });
});


// –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª–∏—Ç–µ
emojiClose.onclick = closeEmojiModal;
textClose.onclick = closeTextModal;

window.onclick = e => {
  if (e.target === emojiModal) closeEmojiModal();
  if (e.target === textModal) closeTextModal();
};

// –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –ø—Ä–∏ –æ—Ç–≤–∞—Ä—è–Ω–µ
window.addEventListener("DOMContentLoaded", () => {
  renderCalendar(currentDate);
});

// –ö–∞–ª–µ–Ω–¥–∞—Ä –±—É—Ç–æ–Ω
document.getElementById("calendar-button").addEventListener("click", () => {
  datePicker.showPicker();
});

const breatheCircle = document.getElementById("breathe-circle");

const phases = [
  { text: "–í–¥–∏—à–∞–π", duration: 4000, scale: 1.3, color: "#d4edda" },
  { text: "–ó–∞–¥—Ä—ä–∂", duration: 4000, scale: 1.3, color: "#ffeeba" },
  { text: "–ò–∑–¥–∏—à–∞–π", duration: 4000, scale: 1.0, color: "#f8d7da" }
];

let phaseIndex = 0;

function runBreathingCycle() {
  const currentPhase = phases[phaseIndex];
  
  breatheCircle.innerText = currentPhase.text;
  breatheCircle.style.transform = `scale(${currentPhase.scale})`;
  breatheCircle.style.backgroundColor = currentPhase.color;

  setTimeout(() => {
    phaseIndex = (phaseIndex + 1) % phases.length;
    runBreathingCycle();
  }, currentPhase.duration);
}

runBreathingCycle();


const questions = [
  {
    question: "–ö–∞–∫ –æ–±–∏–∫–Ω–æ–≤–µ–Ω–æ —Å–µ —Å–ø—Ä–∞–≤—è—à —Å—ä—Å —Å—Ç—Ä–µ—Å–∞?",
    options: [
      { text: "–†–∞–∑—Ö–æ–¥–∫–∞ –Ω–∞–≤—ä–Ω", type: "–ü—Ä–∏—Ä–æ–¥–æ–ª—é–±–∏—Ç–µ–ª" },
      { text: "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏ –π–æ–≥–∞", type: "–°–ø–æ–∫–æ–µ–Ω —É–º" },
      { text: "–ì–æ–≤–æ—Ä—è —Å –ø—Ä–∏—è—Ç–µ–ª–∏", type: "–°–æ—Ü–∏–∞–ª–µ–Ω –æ–ø—Ç–∏–º–∏—Å—Ç" },
      { text: "–ì–ª–µ–¥–∞–º —Ñ–∏–ª–º –∏–ª–∏ –∏–≥—Ä–∞—è –∏–≥—Ä–∏", type: "–ö—Ä–µ–∞—Ç–∏–≤–µ–Ω –±–µ–≥–ª–µ—Ü" }
    ]
  },
  {
    question: "–ö–æ–π –µ —Ç–≤–æ—è—Ç –∏–¥–µ–∞–ª–µ–Ω –Ω–∞—á–∏–Ω –∑–∞ —Ä–µ–ª–∞–∫—Å?",
    options: [
      { text: "–°–ª—É—à–∞–Ω–µ –Ω–∞ —Å–ø–æ–∫–æ–π–Ω–∞ –º—É–∑–∏–∫–∞", type: "–°–ø–æ–∫–æ–µ–Ω —É–º" },
      { text: "–ü—ä—Ç—É–≤–∞–Ω–µ —Å—Ä–µ–¥ –ø—Ä–∏—Ä–æ–¥–∞—Ç–∞", type: "–ü—Ä–∏—Ä–æ–¥–æ–ª—é–±–∏—Ç–µ–ª" },
      { text: "–°—Ä–µ—â–∏ —Å –ø—Ä–∏—è—Ç–µ–ª–∏", type: "–°–æ—Ü–∏–∞–ª–µ–Ω –æ–ø—Ç–∏–º–∏—Å—Ç" },
      { text: "–ß–µ—Ç–µ–Ω–µ –Ω–∞ –∫–Ω–∏–≥–∞", type: "–ö—Ä–µ–∞—Ç–∏–≤–µ–Ω –±–µ–≥–ª–µ—Ü" }
    ]
  },
  {
    question: "–ö–æ–µ –æ—Ç –∏–∑–±—Ä–æ–µ–Ω–∏—Ç–µ —Ç–∏ –Ω–æ—Å–∏ –Ω–∞–π-–º–Ω–æ–≥–æ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ?",
    options: [
      { text: "–¢–∏—à–∏–Ω–∞—Ç–∞", type: "–°–ø–æ–∫–æ–µ–Ω —É–º" },
      { text: "–ó–≤—É–∫—ä—Ç –Ω–∞ –ø—Ç–∏—Ü–∏ –∏ –¥—ä—Ä–≤–µ—Ç–∞", type: "–ü—Ä–∏—Ä–æ–¥–æ–ª—é–±–∏—Ç–µ–ª" },
      { text: "–°–º–µ—Ö—ä—Ç –Ω–∞ –ø—Ä–∏—è—Ç–µ–ª–∏", type: "–°–æ—Ü–∏–∞–ª–µ–Ω –æ–ø—Ç–∏–º–∏—Å—Ç" },
      { text: "–ü–æ—Ç–∞–ø—è–Ω–µ –≤ –∏–∑–º–∏—Å–ª–µ–Ω —Å–≤—è—Ç", type: "–ö—Ä–µ–∞—Ç–∏–≤–µ–Ω –±–µ–≥–ª–µ—Ü" }
    ]
  }
];

let currentQuestionIndex = 0;
let selectedAnswers = [];

const startBtn = document.getElementById("start-quiz");
const quizContainer = document.getElementById("quiz-container");
const quizStart = document.getElementById("quiz-start");
const quizQuestion = document.getElementById("quiz-question");
const quizOptions = document.getElementById("quiz-options");
const quizError = document.getElementById("quiz-error");
const prevBtn = document.getElementById("prev-question");
const nextBtn = document.getElementById("next-question");
const quizResult = document.getElementById("quiz-result");
const quizScore = document.getElementById("quiz-score");
const quizMessage = document.getElementById("quiz-message");
const restartBtn = document.getElementById("restartQuiz");

startBtn.addEventListener("click", () => {
  quizStart.style.display = "none";
  quizContainer.style.display = "block";
  showQuestion();
});

function showQuestion() {
  const current = questions[currentQuestionIndex];
  quizQuestion.innerHTML = `<h2>${current.question}</h2>`;
  quizOptions.innerHTML = "";
  quizError.style.display = "none";

  current.options.forEach((option, index) => {
    const optionId = `question-${currentQuestionIndex}-option-${index}`;

    const wrapper = document.createElement("div");
    wrapper.classList.add("quiz-option-wrapper");

    const input = document.createElement("input");
    input.type = "radio";
    input.name = `question-${currentQuestionIndex}`;
    input.id = optionId;
    input.value = index;
    input.checked = selectedAnswers[currentQuestionIndex] === index;

    input.addEventListener("change", () => {
      selectedAnswers[currentQuestionIndex] = index;
    });

    const label = document.createElement("label");
    label.setAttribute("for", optionId);
    label.innerText = option.text;

    wrapper.appendChild(input);
    wrapper.appendChild(label);
    quizOptions.appendChild(wrapper);
  });

  prevBtn.style.display = currentQuestionIndex > 0 ? "inline-block" : "none";
  nextBtn.innerText = currentQuestionIndex === questions.length - 1 ? "–í–∏–∂ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞" : "–ù–∞–ø—Ä–µ–¥";
}


nextBtn.addEventListener("click", () => {
  if (selectedAnswers[currentQuestionIndex] == null) {
    quizError.style.display = "block";
    return;
  }
  quizError.style.display = "none";

  if (currentQuestionIndex < questions.length - 1) {
    currentQuestionIndex++;
    showQuestion();
  } else {
    showResult();
  }
});

prevBtn.addEventListener("click", () => {
  if (currentQuestionIndex > 0) {
    currentQuestionIndex--;
    showQuestion();
  }
});

restartBtn.addEventListener("click", () => {
  currentQuestionIndex = 0;
  selectedAnswers = [];
  quizResult.style.display = "none";
  quizStart.style.display = "block";
});

function showResult() {
  const typeCounts = {};
  selectedAnswers.forEach((answerIndex, qIndex) => {
    const type = questions[qIndex].options[answerIndex].type;
    typeCounts[type] = (typeCounts[type] || 0) + 1;
  });

  const sorted = Object.entries(typeCounts).sort((a, b) => b[1] - a[1]);
  const resultType = sorted[0][0];

  quizScore.innerHTML = `–¢–∏ —Å–∏: <strong>${resultType}</strong> üßò‚Äç‚ôÄÔ∏è`;
  quizMessage.innerText = getResultMessage(resultType);

  quizContainer.style.display = "none";
  quizResult.style.display = "block";
}

function getResultMessage(type) {
  switch (type) {
    case "–ü—Ä–∏—Ä–æ–¥–æ–ª—é–±–∏—Ç–µ–ª":
      return "–¢–∏ —Å–µ –∑–∞—Ä–µ–∂–¥–∞—à –æ—Ç –ø—Ä–∏—Ä–æ–¥–∞—Ç–∞ –∏ –æ–±–∏—á–∞—à –¥–∞ –Ω–∞–º–∏—Ä–∞—à –±–∞–ª–∞–Ω—Å –≤ –Ω–µ–π–Ω–∞—Ç–∞ –∫—Ä–∞—Å–æ—Ç–∞ üåø";
    case "–°–ø–æ–∫–æ–µ–Ω —É–º":
      return "–¢–≤–æ—è—Ç–∞ —Å–∏–ª–∞ –µ –≤—ä—Ç—Ä–µ—à–Ω–∏—è—Ç –º–∏—Ä. –¢–∏ –æ–±–∏—á–∞—à —Ç–∏—à–∏–Ω–∞—Ç–∞ –∏ –º–æ–º–µ–Ω—Ç–∏—Ç–µ –Ω–∞ –æ—Å—ä–∑–Ω–∞—Ç–æ—Å—Ç üßò";
    case "–°–æ—Ü–∏–∞–ª–µ–Ω –æ–ø—Ç–∏–º–∏—Å—Ç":
      return "–¢–∏ —á–µ—Ä–ø–∏—à –µ–Ω–µ—Ä–≥–∏—è –æ—Ç —Ö–æ—Ä–∞—Ç–∞ –æ–∫–æ–ª–æ —Ç–µ–± –∏ –≤—è—Ä–≤–∞—à, —á–µ —É—Å–º–∏–≤–∫–∞—Ç–∞ –ª–µ–∫—É–≤–∞ üòä";
    case "–ö—Ä–µ–∞—Ç–∏–≤–µ–Ω –±–µ–≥–ª–µ—Ü":
      return "–¢–≤–æ—è—Ç –Ω–∞—á–∏–Ω –∑–∞ —Ä–µ–ª–∞–∫—Å –µ —á—Ä–µ–∑ –≤—ä–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ ‚Äì –∫–Ω–∏–≥–∏, –∏–∑–∫—É—Å—Ç–≤–æ, —Ñ–∞–Ω—Ç–∞–∑–∏—è üé®";
    default:
      return "–£–Ω–∏–∫–∞–ª–µ–Ω —Å–∏! –ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–π –¥–∞ –æ—Ç–∫—Ä–∏–≤–∞—à —Å–µ–±–µ —Å–∏!";
  }
}
